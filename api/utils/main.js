// import { Encryption, Block, Chain } from './XRNFT.js';
// import ecLib from 'elliptic/lib/elliptic/ec/index.js';
// import * as fs from 'fs';

const Encryption = require('./XRNFT.js').Encryption;
const Block = require('./XRNFT.js').Block;
const Chain = require('./XRNFT.js').Chain;
const ecLib = require('elliptic/lib/elliptic/ec/index.js');
const fs = require('fs');

const ec = new ecLib('secp256k1');

// json stuff. Change the json file name
fs.readFile('./utils/test.json', 'utf8', function (err, data) {
    if (err) throw err;
    const myString = JSON.stringify(data);
    console.log(myString);

    const myChain = new Chain();

    // 2 pairs of keys
    // Seller's key pair should be generated by the server
    const keyPairSeller = ec.genKeyPair();
    // const privateKeySeller = keyPairSeller.getPrivate('hex');
    const publicKeySeller = keyPairSeller.getPublic('hex');
    // Buyer's key pair should be provided by the client
    const keyPairBuyer = ec.genKeyPair();
    // const privateKeyBuyer = keyPairBuyer.getPrivate('hex');
    const publicKeyBuyer = keyPairBuyer.getPublic('hex');

    const e1 = new Encryption(myString, publicKeySeller, publicKeyBuyer);
    e1.sign(keyPairSeller)
    // console.log(e1);
    // console.log(e1.isValid());
    if(e1.isValid()) {
        const blockOne = new Block(myString, e1, '0');
        myChain.addBlock(blockOne);
    }
    else {
        console.log('Invalid signature');
    }
    fs.writeFile('./public/public_key.txt', publicKeyBuyer, function (err) {
        if (err) throw err;
        console.log('File is created successfully.');
    });
    console.log('Your public key: ' + publicKeyBuyer);
    console.log(myChain);
    console.log(myChain.isChainValid());    
});